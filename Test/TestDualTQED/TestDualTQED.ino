/*
* August 2013
*
* Kristof Robot
*
* Program to test TQED encoder counter accuracy
*
* It polls 2 TQED encoder counters over (fast) I2C, 
* compares the counter difference with expected difference,
* and writes results to Serial
*
* Schematic:
*  Hook up the encoder inputs of two TQED encoder counters to a frequency generator,
*  and connect their SDA and SCL ports to an Arduino Uno.
*  Use 4.7K Ohm pull up resistors on SDA and SCL lines.
*
* Results:  
*  With a 4883Hz quadrature signal (e.g. generated by QuadratureSimulator.ino), 
*  and a polling delay of 20ms (i.e. about 50Hz polling rate),
*  i.e. expected rate of ticks is 390.
*  We find indeed an average rate of about 390, which is maintained consistently with an accuracy of <2 ticks 
*  Of course this requires careful tuning of both signal generator and the polling loop timing (using DELAY_* values), 
*  using a logic analyzer.
*
*/

#include <Wire.h>
#include <TQED.h>

TQED qed(0x36);
TQED qed2(0x38);
long prevCount=0L;
long currentCount=0L;
long prevCount2=0L;
long currentCount2=0L;
long count=0L;

const int EXPECTED_TICKS=390; //fill in expected value here
const int ACCURACY=2; //fill in expected accuracy here
const int ACCURACY_FREQ=10; //how often should we check accuracy and print out? 
//Note that printing out over Serial does interfere with accuracy at high frequencies, 
//therefore it is best to limit this to the minimum.
//On the other hand, if your real application uses the same hardware, 
//and does use a lot of Serial communication, 
//it is best to mimic that for relevant results.
const int STATUS_FREQ=500; //how often should we print results to serial?
const int DELAY_BETWEEN_POLLS=20; //how long should we wait between polling (in ms);
const int DELAY_LOOP_US=750; //delay that loop itself takes (in us), to be subtracted from above delay to get a precise timing

#define TWI_FREQ_FAST 400000L  //I2C bus speed, default is 100kHz, this value allows speeds up to 400Khz

void setup()
{ 
  //set fast I2C bus speed
  TWBR = ((16000000L / TWI_FREQ_FAST) - 16) / 2;
  
  Serial.begin(115200);  // start serial for output
  Serial.println("Dual TQED Counter Test");
  qed.resetCount();
  qed2.resetCount();
}


void loop()
{
  //Get both counter values
  currentCount=qed.getCount();
  currentCount2=qed2.getCount();

  //check accuracy
  if (count%ACCURACY_FREQ==0){
    if (abs(currentCount-prevCount-EXPECTED_TICKS) > ACCURACY) {
      //print error message
      Serial.print("E1:");
      Serial.println(currentCount-prevCount);
    }
   
    if (abs(currentCount2-prevCount2-EXPECTED_TICKS) > ACCURACY) {
      //print error message
      Serial.print("E2:");
      Serial.println(currentCount2-prevCount2);
    }
  }
 
  count++;
  if (count%STATUS_FREQ == 1) {
    //print current values, as status
    //note that printing out the status causes a slight additional delay, 
    //impacting accuracy; that's why we compare STATS_FREQ with 1 here, not with 0, 
    //to allow accuracy to recover before generating error messages
    Serial.print("S:");
    Serial.print(currentCount-prevCount);
    Serial.print(" ");
    Serial.println(currentCount2-prevCount2);
  }
  
  prevCount=currentCount;
  prevCount2=currentCount2;
  
  delay(DELAY_BETWEEN_POLLS-1);
  delayMicroseconds(1000-DELAY_LOOP_US);  //to account for processing time.
}
